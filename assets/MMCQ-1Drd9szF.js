var M=Object.defineProperty;var z=n=>{throw TypeError(n)};var C=(n,e,s)=>e in n?M(n,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[e]=s;var b=(n,e,s)=>C(n,typeof e!="symbol"?e+"":e,s),d=(n,e,s)=>e.has(n)||z("Cannot "+s);var c=(n,e,s)=>(d(n,e,"read from private field"),s?s.call(n):e.get(n)),g=(n,e,s)=>e.has(n)?z("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(n):e.set(n,s),p=(n,e,s,t)=>(d(n,e,"write to private field"),t?t.call(n,s):e.set(n,s),s);import{C as h}from"./index-Bovew4eR.js";var m,f,a;const u=class u{constructor(e,s,t=0){g(this,m,new Map);g(this,f,0);g(this,a);p(this,a,e),s&&(p(this,m,s),p(this,f,t))}static fromColors(e,s){if(!e)return new u(s);const t=new Map;return e.forEach(o=>{const i=o.compose(s);if(t.has(i)){const r=t.get(i);r.num+=1}else t.set(i,{num:1,color:o})}),new u(s,t,e.length)}get size(){return c(this,f)}mainColor(){const e={r:0,g:0,b:0};for(const s of c(this,m).values())e.r+=s.num*s.color.r,e.g+=s.num*s.color.g,e.b+=s.num*s.color.b;return e.r=e.r/this.size,e.g=e.g/this.size,e.b=e.b/this.size,new h(e.r,e.g,e.b)}deltaDimension(){let e="b";const s=new h(0,0,0),t=new h(255,255,255),o=["r","g","b"];for(const r of c(this,m).values())o.forEach(l=>{s[l]=Math.max(s[l],r.color[l]),t[l]=Math.min(t[l],r.color[l])});const i=new h;return i.r=s.r-t.r,i.g=s.g-t.g,i.b=s.b-t.b,e=i.r>=i.g&&i.r>=i.b?"r":i.g>=i.r&&i.g>=i.b?"g":"b",{dimension:e,middle:(s[e]+t[e])/2}}cutWithDimension(){const{dimension:e,middle:s}=this.deltaDimension(),t={size:0,pixels:new Map},o={size:0,pixels:new Map};for(const i of c(this,m).values()){let r=i.color.compose(c(this,a)),l=i.color[e]>s?o:t;if(l.size+=i.num,l.pixels.has(r)){let w=l.pixels.get(r);w.num+=i.num}else l.pixels.set(r,i)}return{right:new u(c(this,a),o.pixels,o.size),left:new u(c(this,a),t.pixels,t.size)}}};m=new WeakMap,f=new WeakMap,a=new WeakMap;let v=u;var x;class P{constructor(e,s){b(this,"volumes",[]);b(this,"pixels",[]);g(this,x);p(this,x,s);for(let o=0;o<e.length;o+=4){const i=new h(e[o],e[o+1],e[o+2]);this.pixels.push(i)}const t=v.fromColors(this.pixels,c(this,x));this.volumes=[t]}getPalette(e){for(;this.volumes.length<e;){const t=[];for(let o=0,i=this.volumes.length;o<i;o++){const r=this.volumes[o],{left:l,right:w}=r.cutWithDimension();l.size!==0&&t.push(l),w.size!==0&&t.push(w)}if(t.length===this.volumes.length){console.warn("too small pixels");break}this.volumes=t.sort((o,i)=>i.size-o.size)}const s=this.volumes.slice(0,e).map(t=>t.mainColor());return this.getSimilarPalette(s)}getSimilarPalette(e){const s=e.length,t=new Array(s);for(let o=0;o<s;o++)t[o]={delta:255**2*3,color:new h};return this.pixels.forEach(o=>{for(let i=0;i<s;i++){const r=t[i],l=h.delta(o,e[i]);l<r.delta&&(r.delta=l,r.color=o)}}),t.map(o=>o.color)}}x=new WeakMap;export{P as MMCQ};
